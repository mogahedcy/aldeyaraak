import { PrismaClient } from "@prisma/client";

declare global {
  // eslint-disable-next-line no-var
  var __prisma: PrismaClient | undefined;
}

// ุชุญุณูู ุฅุนุฏุงุฏุงุช Prisma ููุฃุฏุงุก
const createPrismaClient = () => {
  return new PrismaClient({
    // ุชุญุณูู ูุณุชูู ุงููููููุบ
    log:
      process.env.NODE_ENV === "development"
        ? ["query", "error", "warn"]
        : ["error"],

    // ุชุญุณูู ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
    datasources: {
      db: {
        url: process.env.DATABASE_URL,
      },
    },

    // ุชุญุณูู ุฅุนุฏุงุฏุงุช ุงูุงุชุตุงู
    __internal: {
      engine: {
        // ุชุญุณูู pool ุงูุงุชุตุงูุงุช
        pool_timeout: 20,
        connection_limit: process.env.NODE_ENV === "production" ? 10 : 5,
      },
    },
  });
};

// ุฅูุดุงุก instance ูุงุญุฏ ูู ุงูุชุทููุฑุ instances ูุชุนุฏุฏุฉ ูู ุงูุฅูุชุงุฌ
export const prisma = globalThis.__prisma ?? createPrismaClient();

// ูู ุงูุชุทููุฑุ ุญูุธ ุงูู instance ูู global ูุชุฌูุจ ุฅูุดุงุก ุงุชุตุงูุงุช ูุชุนุฏุฏุฉ
if (process.env.NODE_ENV !== "production") {
  globalThis.__prisma = prisma;
}

// ุชุญุณูู ุฅุฏุงุฑุฉ ุงูุงุชุตุงูุงุช
process.on("beforeExit", async () => {
  console.log("๐ ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช...");
  await prisma.$disconnect();
});

// ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
process.on("SIGINT", async () => {
  console.log("๐ ุชููู ุฅุดุงุฑุฉ SIGINTุ ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช...");
  await prisma.$disconnect();
  process.exit(0);
});

process.on("SIGTERM", async () => {
  console.log("๐ ุชููู ุฅุดุงุฑุฉ SIGTERMุ ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช...");
  await prisma.$disconnect();
  process.exit(0);
});

// ุฏุงูุฉ ูุณุงุนุฏุฉ ููุชุญูู ูู ุญุงูุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช
export async function checkDatabaseConnection(): Promise<boolean> {
  try {
    await prisma.$queryRaw`SELECT 1`;
    console.log("โ ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุดุท");
    return true;
  } catch (error) {
    console.error("โ ูุดู ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:", error);
    return false;
  }
}

// ุฏุงูุฉ ูุณุงุนุฏุฉ ูุชูููุฐ ุงูุนูููุงุช ูุน ุฅุนุงุฏุฉ ุงููุญุงููุฉ
export async function executeWithRetry<T>(
  operation: () => Promise<T>,
  maxRetries: number = 3,
  delay: number = 1000,
): Promise<T> {
  let lastError: Error;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      lastError = error as Error;
      console.warn(`ูุญุงููุฉ ${attempt}/${maxRetries} ูุดูุช:`, error);

      if (attempt < maxRetries) {
        // ุงูุชุธุงุฑ ูุจู ุงููุญุงููุฉ ุงูุชุงููุฉ
        await new Promise((resolve) => setTimeout(resolve, delay * attempt));
      }
    }
  }

  throw lastError!;
}

// ุฏุงูุฉ ูุณุงุนุฏุฉ ูุชูููุฐ transactions ูุญุณูุฉ
export async function executeTransaction<T>(
  operations: (prisma: PrismaClient) => Promise<T>,
): Promise<T> {
  return executeWithRetry(async () => {
    return prisma.$transaction(operations, {
      maxWait: 10000, // 10 ุซูุงู
      timeout: 30000, // 30 ุซุงููุฉ
      isolationLevel: "ReadCommitted",
    });
  });
}

export default prisma;
