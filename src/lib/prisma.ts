import { PrismaClient } from "@prisma/client";

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined;
};

// ุชุญุณูู ุฅุนุฏุงุฏุงุช Prisma ููุฃุฏุงุก
export const prisma =
  globalForPrisma.prisma ??
  new PrismaClient({
    log:
      process.env.NODE_ENV === "development"
        ? ["query", "error", "warn"]
        : ["error"],
    datasourceUrl: process.env.DATABASE_URL,
    errorFormat: "minimal",
    // ุชุญุณููุงุช ุงูุงุชุตุงู
    datasources: {
      db: {
        url: process.env.DATABASE_URL,
      },
    },
  });

if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;

// ุชุญุณูู ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ูุงูุงุชุตุงู
export async function connectToDatabase() {
  try {
    await prisma.$connect();
    console.log("โ ูุชุตู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช");
  } catch (error) {
    console.error("โ ูุดู ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:", error);
    throw error;
  }
}

export async function disconnectFromDatabase() {
  try {
    await prisma.$disconnect();
    console.log("๐ ุชู ูุทุน ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช");
  } catch (error) {
    console.error("โ ุฎุทุฃ ูู ูุทุน ุงูุงุชุตุงู:", error);
  }
}
